(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.tuscjs_ws = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.crypto=exports.history=exports.network=exports.db=exports.close=exports.chainId=exports.instance=exports.reset=exports.setAutoReconnect=exports.setRpcConnectionStatusCallback=void 0;var _ChainWebSocket=_interopRequireDefault(require("./ChainWebSocket")),_GrapheneApi=_interopRequireDefault(require("./GrapheneApi")),_ChainConfig=_interopRequireDefault(require("./ChainConfig"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var autoReconnect=!1,Apis=null,statusCb=null;// by default don't use reconnecting-websocket
const setRpcConnectionStatusCallback=a=>{statusCb=a,Apis&&Apis.setRpcConnectionStatusCallback(a)};exports.setRpcConnectionStatusCallback=setRpcConnectionStatusCallback;const setAutoReconnect=a=>{autoReconnect=a};exports.setAutoReconnect=setAutoReconnect;const reset=(a="ws://localhost:8090",b,c=4e3,d,e)=>close().then(()=>(Apis=newApis(),Apis.setRpcConnectionStatusCallback(statusCb),Apis&&b&&Apis.connect(a,c,d,e),Apis));exports.reset=reset;const instance=(a="ws://localhost:8090",b,c=4e3,d,e)=>(Apis||(Apis=newApis(),Apis.setRpcConnectionStatusCallback(statusCb)),Apis&&b&&Apis.connect(a,c,d),e&&(Apis.closeCb=e),Apis);exports.instance=instance;const chainId=()=>instance().chain_id;exports.chainId=chainId;const close=async()=>{Apis&&(await Apis.close(),Apis=null)};exports.close=close;const get=a=>new Proxy([],{get:(b,c)=>(...b)=>Apis[a].exec(c,[...b])}),db=get("_db");exports.db=db;const network=get("_net");exports.network=network;const history=get("_hist");exports.history=history;const crypto=get("_crypt");exports.crypto=crypto;const newApis=()=>({connect:(a,b,c={enableCrypto:!1})=>{Apis.url=a;if("undefined"!=typeof window&&window.location&&"https:"===window.location.protocol&&0>a.indexOf("wss://"))throw new Error("Secure domains require wss connection");Apis.ws_rpc&&(Apis.ws_rpc.statusCb=null,Apis.ws_rpc.keepAliveCb=null,Apis.ws_rpc.on_close=null,Apis.ws_rpc.on_reconnect=null),Apis.ws_rpc=new _ChainWebSocket.default(a,Apis.statusCb,b,autoReconnect,a=>{Apis._db&&!a&&Apis._db.exec("get_objects",[["2.1.0"]]).catch(()=>{})}),Apis.init_promise=Apis.ws_rpc.login("","").then(()=>{Apis._db=new _GrapheneApi.default(Apis.ws_rpc,"database"),Apis._net=new _GrapheneApi.default(Apis.ws_rpc,"network_broadcast"),Apis._hist=new _GrapheneApi.default(Apis.ws_rpc,"history"),c.enableCrypto&&(Apis._crypt=new _GrapheneApi.default(Apis.ws_rpc,"crypto"));var a=Apis._db.init().then(()=>Apis._db.exec("get_chain_id",[]).then(a=>(Apis.chain_id=a,_ChainConfig.default.setChainId(a))));Apis.ws_rpc.on_reconnect=()=>{Apis.ws_rpc&&Apis.ws_rpc.login("","").then(()=>{Apis._db.init().then(()=>{Apis.statusCb&&Apis.statusCb("reconnect")}),Apis._net.init(),Apis._hist.init(),c.enableCrypto&&Apis._crypt.init()})},Apis.ws_rpc.on_close=()=>{Apis.close().then(()=>{Apis.closeCb&&Apis.closeCb()})};let b=[a,Apis._net.init(),Apis._hist.init()];return c.enableCrypto&&b.push(Apis._crypt.init()),Promise.all(b)}).catch(b=>(console.error(a,"Failed to initialize with error",b&&b.message),Apis.close().then(()=>{throw b})))},close:async()=>{Apis.ws_rpc&&1===Apis.ws_rpc.ws.readyState&&(await Apis.ws_rpc.close()),Apis.ws_rpc=null},db_api:()=>Apis._db,network_api:()=>Apis._net,history_api:()=>Apis._hist,crypto_api:()=>Apis._crypt,setRpcConnectionStatusCallback:a=>Apis.statusCb=a});
},{"./ChainConfig":2,"./ChainWebSocket":3,"./GrapheneApi":5}],2:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var config={core_asset:"CORE",address_prefix:"GPH",expire_in_secs:15,expire_in_secs_proposal:86400,review_in_secs_committee:86400,networks:{TUSC:{core_asset:"TUSC",address_prefix:"TUSC",chain_id:"1c924c962905ad379a369f83f0135ec128307d2d2508b17b400125e45b547c9a"},Muse:{core_asset:"MUSE",address_prefix:"MUSE",chain_id:"45ad2d3f9ef92a49b55c2227eb06123f613bb35dd08bd876f2aea21925a67a67"},Test:{core_asset:"TEST",address_prefix:"TEST",chain_id:"39f5e2ede1f8bc1a3a54a7914414e3779e33193f1f5693510e73cb7a87617447"},Obelisk:{core_asset:"GOV",address_prefix:"FEW",chain_id:"1cfde7c388b9e8ac06462d68aadbd966b58f88797637d9af805b4560b0e9661e"}},/** Set a few properties for known chain IDs. */setChainId:a=>{let b=Object.entries(config.networks).find(([b,c])=>{if(c.chain_id===a)return config.network_name=b,c.address_prefix&&(config.address_prefix=c.address_prefix),!0});return b?{network_name:b[0],network:b[1]}:void console.log("Unknown chain id (this may be a testnet)",a)},reset:()=>{config.core_asset="CORE",config.address_prefix="GPH",config.expire_in_secs=15,config.expire_in_secs_proposal=86400,console.log("Chain config reset")},setPrefix:(a="GPH")=>config.address_prefix=a},_default=config;exports.default=_default;
},{}],3:[function(require,module,exports){
"use strict";var _isomorphicWs=_interopRequireDefault(require("isomorphic-ws"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}const SOCKET_DEBUG=!1,MAX_SEND_LIFE=5,MAX_RECV_LIFE=2*MAX_SEND_LIFE;class ChainWebSocket{constructor(a,b,c=5e3,d=!0,e=null){_defineProperty(this,"connect",(a,b)=>new Promise((c,d)=>{this.current_reject=d,this.current_resolve=c;try{this.ws=new _isomorphicWs.default(a)}catch(b){// DISCONNECTED
this.ws={readyState:3,close:()=>{}},d(new Error("Invalid url",a," closed"))}this.ws.onopen=this.onOpen,this.ws.onerror=this.onError,this.ws.onmessage=this.onMessage,this.ws.onclose=this.onClose,this.connectionTimeout=setTimeout(()=>{this.current_reject&&(this.current_reject=null,this.close(),d(new Error("Connection attempt timed out after "+b/1e3+"s")))},b)})),_defineProperty(this,"onOpen",()=>{clearTimeout(this.connectionTimeout),this.statusCb&&this.statusCb("open"),this.on_reconnect&&this.on_reconnect(),this.keepalive_timer=setInterval(()=>(this.recv_life--,0==this.recv_life?(console.error(this.url+" connection is dead, terminating ws"),void this.close()):void(this.send_life--,0==this.send_life&&(this.keepAliveCb&&this.keepAliveCb(this.closed),this.send_life=MAX_SEND_LIFE))),5e3),this.current_reject=null,this.current_resolve()}),_defineProperty(this,"onError",a=>{this.keepalive_timer&&(clearInterval(this.keepalive_timer),this.keepalive_timer=void 0),clearTimeout(this.connectionTimeout),this.statusCb&&this.statusCb("error"),this.current_reject&&this.current_reject(a)}),_defineProperty(this,"onMessage",a=>{this.recv_life=MAX_RECV_LIFE,this.listener(JSON.parse(a.data))}),_defineProperty(this,"onClose",()=>{this.closed=!0,this.keepalive_timer&&(clearInterval(this.keepalive_timer),this.keepalive_timer=void 0);for(var a=this.responseCbId+1;a<=this.cbId;a+=1)this.cbs[a].reject(new Error("connection closed"));this.statusCb&&this.statusCb("closed"),this._closeCb&&this._closeCb(),this.on_close&&this.on_close()}),_defineProperty(this,"call",a=>{if(1!==this.ws.readyState)return Promise.reject(new Error("websocket state error:"+this.ws.readyState));let b=a[1];if(SOCKET_DEBUG&&console.log("[ChainWebSocket] >---- call ----->  \"id\":"+(this.cbId+1),JSON.stringify(a)),this.cbId+=1,["set_subscribe_callback","subscribe_to_market","broadcast_transaction_with_callback","set_pending_transaction_callback","set_block_applied_callback"].includes(b)&&(this.subs[this.cbId]={callback:a[2][0]},a[2][0]=this.cbId),["unsubscribe_from_market","unsubscribe_from_accounts"].includes(b)){if("function"!=typeof a[2][0])throw new Error("First parameter of unsub must be the original callback");let b=a[2].splice(0,1)[0];// Find the corresponding subscription
for(let a in this.subs)if(this.subs[a].callback===b){this.unsub[this.cbId]=a;break}}var c={method:"call",params:a};return c.id=this.cbId,this.send_life=MAX_SEND_LIFE,new Promise((a,b)=>{this.cbs[this.cbId]={time:new Date,resolve:a,reject:b},this.ws.send(JSON.stringify(c))})}),_defineProperty(this,"listener",a=>{SOCKET_DEBUG&&console.log("[ChainWebSocket] <---- reply ----<",JSON.stringify(a));let b=!1,c=null;"notice"===a.method&&(b=!0,a.id=a.params[0]),b?c=this.subs[a.id].callback:(c=this.cbs[a.id],this.responseCbId=a.id),c&&!b?(a.error?c.reject(a.error):c.resolve(a.result),delete this.cbs[a.id],this.unsub[a.id]&&(delete this.subs[this.unsub[a.id]],delete this.unsub[a.id])):c&&b?c(a.params[1]):console.log("Warning: unknown websocket response: ",a)}),_defineProperty(this,"login",(a,b)=>this.connect_promise.then(()=>this.call([1,"login",[a,b]]))),_defineProperty(this,"close",()=>new Promise(a=>(clearInterval(this.keepalive_timer),this.keepalive_timer=void 0,this._closeCb=()=>{a(),this._closeCb=null},this.ws?void(this.ws.terminate?this.ws.terminate():this.ws.close(),3===this.ws.readyState&&a()):(console.log("Websocket already cleared",this),a())))),this.url=a,this.statusCb=b,this.current_reject=null,this.on_reconnect=null,this.closed=!1,this.send_life=MAX_SEND_LIFE,this.recv_life=MAX_RECV_LIFE,this.keepAliveCb=e,this.cbId=0,this.responseCbId=0,this.cbs={},this.subs={},this.unsub={},this.connect_promise=this.connect(a,c)}}var _default=ChainWebSocket;exports.default=_default;
},{"isomorphic-ws":7}],4:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var Apis=_interopRequireWildcard(require("./ApiInstances")),_ChainWebSocket=_interopRequireDefault(require("./ChainWebSocket"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var a=new WeakMap;return _getRequireWildcardCache=function(){return a},a}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b=_getRequireWildcardCache();if(b&&b.has(a))return b.get(a);var c={};if(null!=a){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var e in a)if(Object.prototype.hasOwnProperty.call(a,e)){var f=d?Object.getOwnPropertyDescriptor(a,e):null;f&&(f.get||f.set)?Object.defineProperty(c,e,f):c[e]=a[e]}}return c.default=a,b&&b.set(a,c),c}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}class Manager{constructor({url:b,urls:c,autoFallback:d,closeCb:e,optionalApis:f,urlChangeCallback:g}){_defineProperty(this,"setCloseCb",a=>{this.closeCb=a}),_defineProperty(this,"logFailure",(a,b,c)=>{let d=c&&c.message?c.message:"";console.error(a,"Failed to connect to "+b+(d?" Error: "+JSON.stringify(d):""))}),_defineProperty(this,"_onClose",()=>{this.isConnected=!1,this.closeCb&&(this.closeCb(),this.setCloseCb(null)),this.autoFallback&&this.connectWithFallback()}),_defineProperty(this,"connect",async(a=!0,b=this.url)=>{try{let c=await Apis.instance(b,a,void 0,this.optionalApis,this._onClose).init_promise;return this.url=b,this.isConnected=!0,c}catch(a){throw await Apis.close(),a}}),_defineProperty(this,"connectWithFallback",async(a=!0,b=this.url,c=0,d=null,e=null)=>{if(c>this.urls.length)return e(new Error("Tried "+c+" connections, none of which worked: "+JSON.stringify(this.urls.concat(this.url))));try{return await this.connect(a,b)}catch(b){return this.urlChangeCallback&&this.urlChangeCallback(this.urls[c]),this.connectWithFallback(a,this.urls[c],c+1,d,e)}}),_defineProperty(this,"checkConnections",async(a="",b="",c,d)=>{let e={},f=this.urls.concat(this.url),g=f.map(async c=>{/* Use default timeout and no reconnecting-websocket */let d=new _ChainWebSocket.default(c,()=>{},void 0,!1);e[c]=new Date().getTime();try{await d.login(a,b);let f={[c]:new Date().getTime()-e[c]};return await d.close(),f}catch(a){return c===this.url?this.url=this.urls[0]:this.urls=this.urls.filter(b=>b!==c),void(await d.close())}});try{let a=await Promise.all(g),b=a.filter(b=>!!b).sort((c,a)=>Object.values(c)[0]-Object.values(a)[0]).reduce((b,c)=>{let a=Object.keys(c)[0];return b[a]=c[a],b},{});return console.log("Checked ".concat(a.length," connections, ").concat(a.length-Object.keys(b).length," failed")),b}catch(e){return this.checkConnections(a,b,c,d)}}),this.url=b,this.urls=c.filter(c=>c!==b),this.autoFallback=d,this.closeCb=e,this.optionalApis=f||{},this.isConnected=!1,this.urlChangeCallback=g}static close(){return Apis.close()}}var _default=Manager;exports.default=_default;
},{"./ApiInstances":1,"./ChainWebSocket":3}],5:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;class GrapheneApi{constructor(a,b){this.ws_rpc=a,this.api_name=b}init(){var a=this;return this.ws_rpc.call([1,this.api_name,[]]).then(b=>(a.api_id=b,a))}exec(a,b){return this.ws_rpc.call([this.api_id,a,b]).catch(a=>{// console.log("!!! GrapheneApi error: ", method, params, error, JSON.stringify(error));
throw a})}}var _default=GrapheneApi;exports.default=_default;
},{}],6:[function(require,module,exports){
"use strict";var Apis=_interopRequireWildcard(require("./ApiInstances"));Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"Manager",{enumerable:!0,get:function(){return _ConnectionManager.default}}),Object.defineProperty(exports,"ChainConfig",{enumerable:!0,get:function(){return _ChainConfig.default}}),exports.Apis=void 0;exports.Apis=Apis;var _ConnectionManager=_interopRequireDefault(require("./ConnectionManager")),_ChainConfig=_interopRequireDefault(require("./ChainConfig"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var a=new WeakMap;return _getRequireWildcardCache=function(){return a},a}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b=_getRequireWildcardCache();if(b&&b.has(a))return b.get(a);var c={};if(null!=a){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var e in a)if(Object.prototype.hasOwnProperty.call(a,e)){var f=d?Object.getOwnPropertyDescriptor(a,e):null;f&&(f.get||f.set)?Object.defineProperty(c,e,f):c[e]=a[e]}}return c.default=a,b&&b.set(a,c),c}
},{"./ApiInstances":1,"./ChainConfig":2,"./ConnectionManager":4}],7:[function(require,module,exports){
(function (global){
// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js

var ws = null

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket
} else if (typeof global !== 'undefined') {
  ws = global.WebSocket || global.MozWebSocket
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket
} else if (typeof self !== 'undefined') {
  ws = self.WebSocket || self.MozWebSocket
}

module.exports = ws

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[6])(6)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
